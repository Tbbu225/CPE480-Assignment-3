;TACKY Testing Code:
;cf8, cvt, jr, lf, will not be tested

;Tests ci8, jnz8, jz8, a2r, r2a, li, st
Test0:		ci8 $r0, 0xFF
jnz8 $r0, Test0a
sys 0x00	;Failed!
Test0a:		ci8 $r0, 0x00
		jz8 $r0, Test0b
		sys 0x00	;Failed!
Test0b:		ci8 $r0, 0xFF
		a2r $r1, add $r4
sub $r1, add $r4
jz8 $r0, Test0c 
sys 0x00	;Failed!
Test0c:		ci8 $r3, 0xFF
r2a $r1, sub $r3
jz8 $r1, Passed0



Test0d: ;Put li test here 
Test0e: ;Put st test here

Passed0:	pre 0x00
ci8 $r0, 0x00
ci8 $r1, 0x00
ci8 $r2, 0x00
ci8 $r3, 0x00
ci8 $r4, 0x00
ci8 $ra, 0x00
ci8 $rv, 0x00
ci8 $sp, 0x00
;Tests sub
Test1:		ci8 $r0, 0xFF
		sub $r0, r2a $1	;r0 = r0-r0 = should be 0
		jz8 $r0, Passed1
		sys 0x00		;Failed!

Passed1:	pre 0x00
ci8 $r0, 0x00
ci8 $r1, 0x00
ci8 $r2, 0x00
ci8 $r3, 0x00
ci8 $r4, 0x00
ci8 $ra, 0x00
ci8 $rv, 0x00
ci8 $sp, 0x00
;Tests add
Test2:		ci8 $r2, 0x02
		ci8 $r0, 0x03
		add $r2, r2a $1
		sub $r2, r2a $1
		jz8 $r0, Passed2
		sys 0x00		;Failed!

Passed2:	pre 0x00
ci8 $r0, 0x00
ci8 $r1, 0x00
ci8 $r2, 0x00
ci8 $r3, 0x00
ci8 $r4, 0x00
ci8 $ra, 0x00
ci8 $rv, 0x00
ci8 $sp, 0x00
;Tests mul
Test3:		ci8 $r2, 0x02		;r2 = 0x02
		mul $r2, r2a $r1  	;r0 = r0*r2 = 0x00*0x02 = should be 0x00
		jz8 $r0, Test3a		;Pass if r0 = 0x00
		sys 0x00		;Failed!
Test3a:		ci8 $r3, 0x04		;r3 = 0x04
r2a $r2, r2a $r1	;r0 = r2 = 0x02 
	mul $r2, r2a $r1	;r0 = r0*r2 = 0x02*0x02 = should be 0x04
		sub $r3, r2a $r1 	;r0 = r0-r3 = 0x04-0x04 = should be 0x00
		jz8 $r0, Passed3	;Pass if r0 = 0x00
		sys 0x00		;Failed!

Passed3:	pre 0x00
ci8 $r0, 0x00
ci8 $r1, 0x00
ci8 $r2, 0x00
ci8 $r3, 0x00
ci8 $r4, 0x00
ci8 $ra, 0x00
ci8 $rv, 0x00
ci8 $sp, 0x00
;Tests div
Test4:		ci8 $r2, 0x02		;r2 = 0x02
		div $r2, r2a $r1	;r0 = r0/r2 = 0x00/0x02 = should be 0x00
		jz8 $r0, Test4a		;Pass if r0 = 0x00
		sys 0x00		;Failed!
Test4a:		ci8 $r3, 0x01		;r3 = 0x01
		r2a $r2, r2a $r1	;r0 = 0x02
		div $r2, r2a $r1	;r0 = r0/r2 = 0x02/0x02 = should be 0x01
		sub $r3, r2a $r1 	;r0 = r0-r3 = 0x01-0x01 = should be 0x00
		jz8 $r0, Passed4	;Pass if r0 = 0x00
		sys 0x00		;Failed!

Passed4:	pre 0x00
ci8 $r0, 0x00
ci8 $r1, 0x00
ci8 $r2, 0x00
ci8 $r3, 0x00
ci8 $r4, 0x00
ci8 $ra, 0x00
ci8 $rv, 0x00
ci8 $sp, 0x00
;Tests and
Test5:		ci8 $r0, 0x01
		ci8 $r1, 0x01
ci8 $r2, 0x01
and $r2, r2a $1	;r0 = r0&r2 = 0x01&0x01 = 0x01
sub $r1, r2a $1	;r0 = r0-r1 = 0x01-0x01 = should be 0x00
jz8 $r0, Passed5	;Pass if r0 = 0x00
sys 0x00		;Failed!

Passed5:	pre 0x00
ci8 $r0, 0x00
ci8 $r1, 0x00
ci8 $r2, 0x00
ci8 $r3, 0x00
ci8 $r4, 0x00
ci8 $ra, 0x00
ci8 $rv, 0x00
ci8 $sp, 0x00
;Tests not
Test6:		pre 0xff
ci8 $r2, 0xfe		;r2 = 0xfe
		pre 0xFF
ci8 $r2, 0xfe		;r2 = 0xfe
pre 0x00
ci8 $r1, 0x01		;r1 = 0x0001
		not $r2, r2a $1		;r0 = !r2 = 0x01
		sub $r1, r2a $1	        ;r0 = r0-r1 = 0x01-0x01 = should be 0x00
jz8 $r0, Passed6	;Pass if r0 = 0x00
sys 0x00		;Failed!


Passed6:	pre 0x00
ci8 $r0, 0x00
ci8 $r1, 0x00
ci8 $r2, 0x00
ci8 $r3, 0x00
ci8 $r4, 0x00
ci8 $ra, 0x00
ci8 $rv, 0x00
ci8 $sp, 0x00
;Tests or
Test7:		ci8 $r0, 0x00		;r0 = 0x00
		ci8 $r1, 0x01		;r1 = 0x01
		or $r1, r2a $1		;r0 = r0 | r1 =0x00 | 0x01 = should be 0x01
		sub $r1, r2a $1 	;r0 = r0-r1 = 0x01-0x01 = should be 0x00
jz8 $r0, Passed7	;Pass if r0 = 0x00
sys 0x00		;Failed!

Passed7:	pre 0x00
ci8 $r0, 0x00
ci8 $r1, 0x00
ci8 $r2, 0x00
ci8 $r3, 0x00
ci8 $r4, 0x00
ci8 $ra, 0x00
ci8 $rv, 0x00
ci8 $sp, 0x00
;Tests sh
Test8:		ci8 $r2, 0x01		;r2 = 0x01
		ci8 $r0, 0x10		;r0 = 0x10
		sh $r2, r2a $r1		;r0 = r0 >> 1 = 0x01
		sub $r2, r2a $1 	;r0 = r0-r2 = 0x01-0x01 = should be 0x00
jz8 $r0, Passed8	;Pass if r0 = 0x00
sys 0x00		;Failed!

Passed8:	pre 0x00
ci8 $r0, 0x00
ci8 $r1, 0x00
ci8 $r2, 0x00
ci8 $r3, 0x00
ci8 $r4, 0x00
ci8 $ra, 0x00
ci8 $rv, 0x00
ci8 $sp, 0x00
;Tests slt
Test9:		ci8 $r2, 0xff		;r2 = 0xff
		ci8 $r1, 0x01		;r1 = 0x01
		ci8 $r0, 0x11		;r0 = 0x11
		slt $r2, r2a $r1		;r0 = (r0 < r2) = (0x11 < 0xff) = should be 0x01
		sub $r1, r2a $1 	;r0 = r0-r1 = 0x01-0x01 = should be 0x00
jz8 $r0, Passed9	;Pass if r0 = 0x00
sys 0x00		;Failed!

Passed9:	pre 0x00
ci8 $r0, 0x00
ci8 $r1, 0x00
ci8 $r2, 0x00
ci8 $r3, 0x00
ci8 $r4, 0x00
ci8 $ra, 0x00
ci8 $rv, 0x00
ci8 $sp, 0x00
;Tests xor
Test10:		ci8 $r0, 0x00		;r0 = 0x00
		ci8 $r1, 0x01		;r1 = 0x01
		xor $r1, r2a $1		;r0 = r0 ^ r1 =0x00 ^ 0x01 = should be 0x01
		sub $r1, r2a $1 	;r0 = r0-r1 = 0x01-0x01 = should be 0x00
jz8 $r0, AllPassed	;Pass if r0 = 0x00
sys 0x00		;Failed!

AllPassed:	pre 0x2A
ci8 $r0, 0x2A
ci8 $r1, 0x2A
ci8 $r2, 0x2A
ci8 $r3, 0x2A
ci8 $r4, 0x2A
ci8 $ra, 0x2A
ci8 $rv, 0x2A
ci8 $sp, 0x2A
sys 0x00		;Passed!
