Bitfield Layouts
available opcode values:        2^5 = 32
total VLIWable instructions:    16
    --> All instructions that span both operation fields (including jr) will have
        opcode MSB = 0, all others MSB = 1

double instruction word layout:
         op    r     op    r
      [#####][###][#####][###]

double operand word layout:
         op    r     imm8
      [#####][###][########]

imm8 operand only word layout:
         op nothing  imm8
      [#####][000][########]

Encoding Schemes:
Operations I want to have similar opcodes:
  arithmatic ops    --> add sub mul div sh    --> field acc   --> double instruction word layout
  logic ops         --> and or xor not slt    --> field acc   --> double instruction word layout
  memory ops        --> lf li st              --> field acc   --> double instruction word layout
  load imm8 ops     --> cf8 ci8               --> span 0, 1   --> double operand word layout
  managing reg ops  --> a2r r2a cvt           --> field acc   --> double instruction word layout
  jump ops          --> jnz8 jp8 jr jz8       --> span 0, 1   --> all three
  weird ops         --> sys pre               --> span 0, 1   --> imm8 operand only word layout




Grey Code Encoding Scheme

Encoding bit patterns:
0b00000->no-op	0b00001->pre 		0b00011->jp8		0b00010->sys 		0b00110->cf8		0b00111->ci8		0b00101-> jnz8	0b00100->jz8		0b01100->a2r		0b01101->r2a		0b01111->lf		0b01110->li		0b01010->st		0b01011->cvt		0b01001->jr		0b01000->Start		0b11000->add		0b11001->sub		0b11011->mul		0b11010->div 		0b11110->and		0b11111->or		0b11101->xor		0b11100->not		0b10100->sh		0b10101->slt



case(opCode)

0b1xxxx:	ALUMOD
